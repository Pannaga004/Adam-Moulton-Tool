import numpy as np
import sympy as sp

def parse_ode(ode_str):
    t, y = sp.symbols('t y')
    ode_expr = sp.sympify(ode_str)
    f = sp.lambdify((t, y), ode_expr, 'numpy')
    return f

def euler_method(f, t0, y0, h, steps):
    t_values = [t0]
    y_values = [y0]
    
    for i in range(steps):
        t = t_values[-1]
        y = y_values[-1]
        y_new = y + h * f(t, y)
        t_values.append(t + h)
        y_values.append(y_new)
    
    return np.array(t_values), np.array(y_values)

def adams_moulton_method(f, t0, y0, h, steps):
    t_values, y_values = euler_method(f, t0, y0, h, steps)
    
    for i in range(3, steps):
        t = t_values[i]
        y = y_values[i]
        yp = y_values[i] + h * (23*f(t_values[i], y_values[i]) - 16*f(t_values[i-1], y_values[i-1]) + 5*f(t_values[i-2], y_values[i-2])) / 12
        y_new = y_values[i] + h * (5*f(t_values[i+1], yp) + 8*f(t_values[i], y_values[i]) - f(t_values[i-1], y_values[i-1])) / 12
        t_values.append(t + h)
        y_values.append(y_new)
    
    return np.array(t_values), np.array(y_values)

def solve_ode():
    print("Solve an ODE using Adams-Moulton method")

    ode_str = input("Enter the ODE in the form 'dy/dt = f(t, y)': ")
    t0 = float(input("Enter the initial value of t: "))
    y0 = float(input("Enter the initial value of y: "))
    h = float(input("Enter the step size (h): "))
    steps = int(input("Enter the number of steps: "))
    
    f = parse_ode(ode_str)
    t_values, y_values = adams_moulton_method(f, t0, y0, h, steps)
    
    print("\nResults:")
    
